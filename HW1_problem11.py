def PatternToNum(Pattern):
    dna = ['A','C','G','T']
    if len(Pattern) == 0:
        return 0
    symbol = Pattern[-1]
    prefix = Pattern[0:len(Pattern)-1]
    return 4*PatternToNum(prefix) + dna.index(symbol)

def NumToPattern(index,k):
    dna = ['A','C','G','T']
    if k == 1:
        return dna[index]
    prefixIndex = int(index/4)
    r = index%4
    symbol = dna[r]
    prefixPattern = NumToPattern(prefixIndex, k-1)
    return prefixPattern+symbol

def ComputingFrequencies(Text,k):
    freqArr = [0]*(4**k)
    for i in range(len(Text)-k+1):
        pattern = Text[i:i+k]
        j = PatternToNum(pattern)
        freqArr[j] = freqArr[j]+1
    return freqArr

ComputingFrequencies('ATGGCTCCACTGGGCCGTCAACGGGTTCGATGGTCGTGAGGCTGCCCGCGATAATACCAAGCGAAACGGTCATATGGTCGCATTATCTTATAAATCCATACCAAGATATTAAAGCGCATTTGTTAACGCCTAGTCGACTTTGGCCGCGACCTAGAGGGTTCAGGACGAGCGAGAACGCATGGTAGTGAATAAATGTACCTCGGATATAGCATGACGCGCGGTGGCGTTCATTCGTACATGCCATTACGACCGGGTCATAGCCGAATGGCTTTCTCTACATCTTGCGGGCGTCGCCCTGGCAGAGAACAGTAGACTGACAGTCTATGGTTCCCTGCCTCTGGTTATCTTCTTCATTACGGATTCTACGTATACGAGACTCCGCACTTTAGCGGCGTTCTTTAAGATTATCCGCCGGGCGAGGAGAAATATTCCAACGTACCTTCCTATTTAAACTCAGCGGTTTATGAATCCATCCAACGAGGTTGCTTCGCGCCTGGAGGAAATATGAAGACCCTTTAAAAAACGGTGATACTCCTACTGTGACGCCACACCAAGTCGAGCGGCTAGGCATCAGACGTACACAAATTAGAAAACTTACTTGTTACACCGAATTTGCCCACAGACTTTTTTTCTCCCCTCGCGGTAATCGTGGCATCTACTGCCTCCC',6)
